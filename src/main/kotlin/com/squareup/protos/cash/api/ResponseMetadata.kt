// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.cash.api.ResponseMetadata in squareup/cash/api/contract.proto
package com.squareup.protos.cash.api

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Standard metadata for response payloads in the Cash App Pay APIs.
 * Used by Liaison to propagate errors and other metadata to API clients.
 */
public class ResponseMetadata(
  errors: List<Error> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ResponseMetadata, ResponseMetadata.Builder>(ADAPTER, unknownFields) {
  /**
   * The errors encountered while processing the given request. If empty, indicates the
   * request was processed successfully.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.protos.cash.api.Error#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  @JvmField
  public val errors: List<Error> = immutableCopyOf("errors", errors)

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.errors = errors
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ResponseMetadata) return false
    if (unknownFields != other.unknownFields) return false
    if (errors != other.errors) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + errors.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (errors.isNotEmpty()) result += """errors=$errors"""
    return result.joinToString(prefix = "ResponseMetadata{", separator = ", ", postfix = "}")
  }

  public fun copy(errors: List<Error> = this.errors, unknownFields: ByteString =
      this.unknownFields): ResponseMetadata = ResponseMetadata(errors, unknownFields)

  public class Builder : Message.Builder<ResponseMetadata, Builder>() {
    @JvmField
    public var errors: List<Error> = emptyList()

    /**
     * The errors encountered while processing the given request. If empty, indicates the
     * request was processed successfully.
     */
    public fun errors(errors: List<Error>): Builder {
      checkElementsNotNull(errors)
      this.errors = errors
      return this
    }

    public override fun build(): ResponseMetadata = ResponseMetadata(
      errors = errors,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ResponseMetadata> = object : ProtoAdapter<ResponseMetadata>(
      FieldEncoding.LENGTH_DELIMITED, 
      ResponseMetadata::class, 
      "type.googleapis.com/squareup.cash.api.ResponseMetadata", 
      PROTO_2, 
      null, 
      "squareup/cash/api/contract.proto"
    ) {
      public override fun encodedSize(`value`: ResponseMetadata): Int {
        var size = value.unknownFields.size
        size += Error.ADAPTER.asRepeated().encodedSizeWithTag(1, value.errors)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ResponseMetadata): Unit {
        Error.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.errors)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ResponseMetadata): Unit {
        writer.writeBytes(value.unknownFields)
        Error.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.errors)
      }

      public override fun decode(reader: ProtoReader): ResponseMetadata {
        val errors = mutableListOf<Error>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> errors.add(Error.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ResponseMetadata(
          errors = errors,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ResponseMetadata): ResponseMetadata = value.copy(
        errors = value.errors.redactElements(Error.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
